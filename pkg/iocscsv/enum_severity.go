// Code generated by enum (github.com/mpkondrashin/enum). DO NOT EDIT

package iocscsv

import (
    "encoding/json"
    "errors"
    "fmt"
    "strconv"
    "strings"
)

type Severity int

const (
    SeverityLow    Severity = iota
    SeverityMedium Severity = iota
    SeverityHigh   Severity = iota
)


// String - return string representation for Severity value
func (v Severity)String() string {
    s, ok := map[Severity]string {
         SeverityLow:    "Low",
         SeverityMedium: "Medium",
         SeverityHigh:   "High",
    }[v]
    if ok {
        return s
    }
    return "Severity(" + strconv.FormatInt(int64(v), 10) + ")"
}

// ErrUnknownSeverity - will be returned wrapped when parsing string
// containing unrecognized value.
var ErrUnknownSeverity = errors.New("unknown Severity")


var mapSeverityFromString = map[string]Severity{
    "low":    SeverityLow,
    "medium":    SeverityMedium,
    "high":    SeverityHigh,
}

// UnmarshalJSON implements the Unmarshaler interface of the json package for Severity.
func (s *Severity) UnmarshalJSON(data []byte) error {
    var v string
    if err := json.Unmarshal(data, &v); err != nil {
        return err
    }
    result, ok := mapSeverityFromString[strings.ToLower(v)]
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownSeverity, v)
    }
    *s = result
    return nil
}

// MarshalJSON implements the Marshaler interface of the json package for Severity.
func (s Severity) MarshalJSON() ([]byte, error) {
    return []byte(fmt.Sprintf("\"%v\"", s)), nil
}

// UnmarshalYAML implements the Unmarshaler interface of the yaml.v3 package for Severity.
func (s *Severity) UnmarshalYAML(unmarshal func(interface{}) error) error {
    var v string
    if err := unmarshal(&v); err != nil {
        return err
    }
    result, ok := mapSeverityFromString[strings.ToLower(v)]  
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownSeverity, v)
    }
    *s = result
    return nil
}

// Code generated by enum (github.com/mpkondrashin/enum). DO NOT EDIT

package iocscsv

import (
    "encoding/json"
    "errors"
    "fmt"
    "strconv"
    "strings"
)

type ThreatType int

const (
    ThreatTypeMd5       ThreatType = iota
    ThreatTypeSha256    ThreatType = iota
    ThreatTypeUrl       ThreatType = iota
    ThreatTypeEmail_src ThreatType = iota
    ThreatTypeIp_dst    ThreatType = iota
    ThreatTypeBtc       ThreatType = iota
    ThreatTypeHostname  ThreatType = iota
    ThreatTypeDomain    ThreatType = iota
    ThreatTypeFilename  ThreatType = iota
    ThreatTypeSha1      ThreatType = iota
)


// String - return string representation for ThreatType value
func (v ThreatType)String() string {
    s, ok := map[ThreatType]string {
         ThreatTypeMd5:       "md5",
         ThreatTypeSha256:    "sha256",
         ThreatTypeUrl:       "url",
         ThreatTypeEmail_src: "email-src",
         ThreatTypeIp_dst:    "ip-dst",
         ThreatTypeBtc:       "btc",
         ThreatTypeHostname:  "hostname",
         ThreatTypeDomain:    "domain",
         ThreatTypeFilename:  "filename",
         ThreatTypeSha1:      "sha1",
    }[v]
    if ok {
        return s
    }
    return "ThreatType(" + strconv.FormatInt(int64(v), 10) + ")"
}

// ErrUnknownThreatType - will be returned wrapped when parsing string
// containing unrecognized value.
var ErrUnknownThreatType = errors.New("unknown ThreatType")


var mapThreatTypeFromString = map[string]ThreatType{
    "md5":    ThreatTypeMd5,
    "sha256":    ThreatTypeSha256,
    "url":    ThreatTypeUrl,
    "email-src":    ThreatTypeEmail_src,
    "ip-dst":    ThreatTypeIp_dst,
    "btc":    ThreatTypeBtc,
    "hostname":    ThreatTypeHostname,
    "domain":    ThreatTypeDomain,
    "filename":    ThreatTypeFilename,
    "sha1":    ThreatTypeSha1,
}

// UnmarshalJSON implements the Unmarshaler interface of the json package for ThreatType.
func (s *ThreatType) UnmarshalJSON(data []byte) error {
    var v string
    if err := json.Unmarshal(data, &v); err != nil {
        return err
    }
    result, ok := mapThreatTypeFromString[strings.ToLower(v)]
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownThreatType, v)
    }
    *s = result
    return nil
}

// MarshalJSON implements the Marshaler interface of the json package for ThreatType.
func (s ThreatType) MarshalJSON() ([]byte, error) {
    return []byte(fmt.Sprintf("\"%v\"", s)), nil
}

// UnmarshalYAML implements the Unmarshaler interface of the yaml.v3 package for ThreatType.
func (s *ThreatType) UnmarshalYAML(unmarshal func(interface{}) error) error {
    var v string
    if err := unmarshal(&v); err != nil {
        return err
    }
    result, ok := mapThreatTypeFromString[strings.ToLower(v)]  
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownThreatType, v)
    }
    *s = result
    return nil
}

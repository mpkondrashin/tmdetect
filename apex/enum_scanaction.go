// Code generated by enum (github.com/mpkondrashin/enum). DO NOT EDIT

package apex

import (
    "encoding/json"
	"errors"
    "fmt"
    "strconv"
	"strings"
)

type ScanAction int

const (
    ScanActionBlock ScanAction = iota
    ScanActionLog ScanAction = iota
)

// String - return string representation for ScanAction value
func (v ScanAction)String() string {
    s, ok := map[ScanAction]string {
        ScanActionBlock: "Block",
        ScanActionLog: "Log",
    }[v]
    if ok {
        return s
    }
    return "ScanAction(" + strconv.FormatInt(int64(v), 10) + ")"
}

// ErrUnknownScanAction - will be returned wrapped when parsing string
// containing unrecognized value.
var ErrUnknownScanAction = errors.New("unknown ScanAction")

var mapScanActionFromString = map[string]ScanAction{
    "block": ScanActionBlock,
    "log": ScanActionLog,
}

// UnmarshalJSON implements the Unmarshaler interface of the json package for ScanAction.
func (s *ScanAction) UnmarshalJSON(data []byte) error {
    var v string
    if err := json.Unmarshal(data, &v); err != nil {
        return err
    }
    result, ok := mapScanActionFromString[strings.ToLower(v)]
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownScanAction, v)
    }
    *s = result
    return nil
}

// UnmarshalYAML implements the Unmarshaler interface of the yaml.v3 package for ScanAction.
func (s *ScanAction) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var v string
	if err := unmarshal(&v); err != nil {
		return err
	}
	result, ok := mapScanActionFromString[strings.ToLower(v)]		
	if !ok {
		return fmt.Errorf("%w: %s", ErrUnknownScanAction, v)
	}
	*s = result
	return nil
}
